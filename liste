<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Banque de Commandes de Pièces</title>

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

  <!-- XLSX (pour export Excel) -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

  <style>
    .form-section {
      margin-bottom: 20px;
      padding: 15px;
      border-radius: 5px;
      background-color: #f8f9fa;
    }
    .btn-group button {
      margin-right: 5px;
      margin-bottom: 5px;
    }
    .non-livre {
      background-color: #dc3545;
      color: white;
    }
    .en-cours {
      background-color: #ffc107;
      color: black;
    }
    .livre {
      background-color: #198754;
      color: white;
    }
    .action-buttons {
      white-space: nowrap;
    }
    /* Pour occuper toute la largeur */
    .container-fluid {
      padding: 15px;
    }
    /* On autorise le renvoi à la ligne dans les cellules */
    .table th,
    .table td {
      white-space: normal !important;
      word-break: break-word;
    }
    .table-success {
      background-color: #d1e7dd !important;
    }
    .table-warning {
      background-color: #fff3cd !important;
    }
    /* Styles pour les boutons Pays */
    .pays-usa-selected {
      background-color: #dc3545 !important;
      color: white !important;
    }
    .pays-autre-selected {
      background-color: #198754 !important;
      color: white !important;
    }
  </style>
</head>
<body>

<div class="container-fluid">
  <h1 class="text-center mt-4 mb-4">Banque de Commandes de Pièces</h1>

  <!-- FORMULAIRE -->
  <div class="form-section">
    <h2>Nouvelle Commande</h2>
    <form id="orderForm">
      <input type="hidden" id="orderId" />
      <!-- Champ caché pour stocker le pays -->
      <input type="hidden" id="pays" />

      <div class="row">
        <div class="col-md-4 mb-3">
          <label for="bt_reparation" class="form-label">Numéro BT/Réparation</label>
          <input type="text" class="form-control" id="bt_reparation" placeholder="Ex: REP1234" />
        </div>
        <!-- Remplacer le champ Demandeur par une liste déroulante restreinte -->
        <div class="col-md-4 mb-3">
          <label for="demandeur" class="form-label">Demandeur</label>
          <select id="demandeur" class="form-select" required>
            <option value="">Sélectionnez...</option>
            <option value="Maxime Clément">Maxime Clément</option>
            <option value="Nicholas Rivet">Nicholas Rivet</option>
            <option value="Zine Chergui">Zine Chergui</option>
          </select>
        </div>
        <div class="col-md-4 mb-3">
          <label for="description" class="form-label">Description de la pièce</label>
          <input type="text" class="form-control" id="description" required placeholder="Ex: Résistance 10kΩ" />
        </div>
      </div>

      <div class="row">
        <div class="col-md-4 mb-3">
          <label for="manufacturier" class="form-label">Manufacturier</label>
          <input type="text" class="form-control" id="manufacturier" placeholder="Ex: Panasonic" />
        </div>
        <div class="col-md-4 mb-3">
          <label for="modele" class="form-label">Modèle</label>
          <input type="text" class="form-control" id="modele" placeholder="Ex: ERJ-6ENF1002V" />
        </div>
        <div class="col-md-4 mb-3">
          <label for="quantite" class="form-label">Quantité</label>
          <input type="number" class="form-control" id="quantite" min="1" value="1" required oninput="calculateTotal()" />
        </div>
      </div>

      <div class="row">
        <div class="col-md-4 mb-3">
          <label for="cout" class="form-label">Coût unitaire</label>
          <input type="number" step="0.01" class="form-control" id="cout" required oninput="calculateTotal()" placeholder="Ex: 1.50" />
        </div>
        <div class="col-md-4 mb-3">
          <label for="devise" class="form-label">Devise</label>
          <select class="form-select" id="devise" onchange="calculateTotal()">
            <option value="CAD">CAD</option>
            <option value="USD">USD</option>
            <option value="EUR">EUR</option>
          </select>
        </div>
        <div class="col-md-4 mb-3">
          <label for="total" class="form-label">Total</label>
          <input type="text" class="form-control" id="total" readonly />
        </div>
      </div>

      <div class="row">
        <div class="col-md-4 mb-3">
          <label for="lien_vendeur" class="form-label">Lien vendeur</label>
          <input type="url" class="form-control" id="lien_vendeur" placeholder="Ex: https://..." />
        </div>
        <div class="col-md-4 mb-3">
          <label for="fournisseur" class="form-label">Fournisseur</label>
          <input type="text" class="form-control" id="fournisseur" placeholder="Ex: Digikey" />
        </div>
        <div class="col-md-4 mb-3">
          <label class="form-label">Options Fournisseur</label>
          <div class="btn-group d-flex">
            <button type="button" class="btn btn-outline-secondary" onclick="setFournisseur('Amazon')">Amazon</button>
            <button type="button" class="btn btn-outline-secondary" onclick="setFournisseur('Digikey')">Digikey</button>
            <button type="button" class="btn btn-outline-secondary" onclick="setFournisseur('Mouser')">Mouser</button>
          </div>
        </div>
      </div>

      <!-- SECTION PAYS -->
      <div class="row">
        <div class="col-md-4 mb-3">
          <label class="form-label">Pays</label>
          <div class="btn-group d-flex">
            <button type="button" id="btnUSA" class="btn btn-outline-secondary" onclick="setPays('USA')">USA</button>
            <button type="button" id="btnAutre" class="btn btn-outline-secondary" onclick="setPays('Autre')">Autre</button>
          </div>
        </div>
      </div>
      <!-- FIN SECTION PAYS -->

      <div class="row">
        <div class="col-md-4 mb-3">
          <label for="suivi_spg" class="form-label">Suivi SPG</label>
          <select class="form-select" id="suivi_spg">
            <option value="Non traité">Non traité</option>
            <option value="En cours">En cours</option>
            <option value="Commandé">Commandé</option>
          </select>
        </div>
        <div class="col-md-4 mb-3">
          <label for="code_achat" class="form-label">Code d'achat</label>
          <input type="text" class="form-control" id="code_achat" placeholder="Ex: ACHAT420" />
        </div>
        <div class="col-md-4 mb-3">
          <label class="form-label">Statut livraison</label>
          <input type="hidden" id="livraison" value="Non livré" />
          <div class="btn-group d-flex">
            <button type="button" id="btnNonLivre" class="btn btn-outline-danger" onclick="setLivraison('Non livré')">Non livré</button>
            <button type="button" id="btnEnCours" class="btn btn-outline-warning" onclick="setLivraison('En cours')">En cours</button>
            <button type="button" id="btnLivre" class="btn btn-outline-success" onclick="setLivraison('Livré')">Livré</button>
          </div>
        </div>
      </div>

      <div class="row mt-3">
        <div class="col-md-12">
          <button type="button" class="btn btn-primary" onclick="appController.saveData()">Enregistrer</button>
          <button type="button" class="btn btn-secondary" onclick="appController.resetForm()">Réinitialiser</button>
          <button type="button" class="btn btn-danger" onclick="appController.cancelEdit()" id="cancelEditBtn" style="display: none;">Annuler modification</button>
          <button type="button" class="btn btn-success" onclick="appController.exportToExcel()">Exporter vers Excel</button>
        </div>
      </div>
    </form>
  </div>

  <!-- SECTION FILTRE -->
  <div class="mb-3">
    <h2>Filtrer les Commandes</h2>
    <div class="row g-3">
      <div class="col-md-4">
        <input type="text" id="searchInput" class="form-control" placeholder="Rechercher par BT ou Code d'achat" oninput="appController.filterAndDisplayOrders()" />
      </div>
      <div class="col-md-4">
        <select id="filterSuivi" class="form-select" onchange="appController.filterAndDisplayOrders()">
          <option value="">Tous les suivis SPG</option>
          <option value="Non traité">Non traité</option>
          <option value="En cours">En cours</option>
          <option value="Commandé">Commandé</option>
        </select>
      </div>
      <div class="col-md-4">
        <select id="filterLivraison" class="form-select" onchange="appController.filterAndDisplayOrders()">
          <option value="">Tous les statuts de livraison</option>
          <option value="Non livré">Non livré</option>
          <option value="En cours">En cours</option>
          <option value="Livré">Livré</option>
        </select>
      </div>
    </div>
  </div>
  <!-- FIN SECTION FILTRE -->

  <!-- TABLEAU D'AFFICHAGE -->
  <h2>Commandes Enregistrées</h2>
  <div id="loadingIndicator" class="alert alert-info" style="display: none;">Chargement des données...</div>
  <table class="table table-striped table-hover table-sm" style="width: 100%;">
    <thead>
      <tr>
        <th>Date</th>
        <th>BT/Réparation</th>
        <th>Demandeur</th>
        <th>Description</th>
        <th>Manufacturier</th>
        <th>Modèle</th>
        <th>Quantité</th>
        <th>Coût</th>
        <th>Total</th>
        <th>Fournisseur</th>
        <th>Suivi SPG</th>
        <th>Livraison</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="ordersTableBody">
      <!-- Les commandes seront ajoutées ici dynamiquement -->
    </tbody>
  </table>

  <!-- MESSAGE DE STATUT -->
  <div id="statusIndicator" class="alert alert-info mt-3" style="display: none;"></div>
</div>

<!-- SCRIPTS DE FONCTIONNALITÉS -->
<script>
  // Calcule le total (quantité * coût)
  function calculateTotal() {
    const quantite = parseFloat(document.getElementById("quantite").value) || 0;
    const cout = parseFloat(document.getElementById("cout").value) || 0;
    const total = quantite * cout;
    document.getElementById("total").value = total.toFixed(2);
  }

  // Définit le fournisseur
  function setFournisseur(fournisseur) {
    document.getElementById("fournisseur").value = fournisseur;
  }

  // Met à jour le statut livraison
  function setLivraison(status) {
    document.getElementById("livraison").value = status;
    document.getElementById("btnNonLivre").classList.remove("non-livre");
    document.getElementById("btnEnCours").classList.remove("en-cours");
    document.getElementById("btnLivre").classList.remove("livre");
    if (status === "Non livré") {
      document.getElementById("btnNonLivre").classList.add("non-livre");
    } else if (status === "En cours") {
      document.getElementById("btnEnCours").classList.add("en-cours");
    } else if (status === "Livré") {
      document.getElementById("btnLivre").classList.add("livre");
    }
  }

  // Gère la sélection du pays (USA = rouge, Autre = vert)
  function setPays(pays) {
    document.getElementById("btnUSA").classList.remove("pays-usa-selected");
    document.getElementById("btnAutre").classList.remove("pays-autre-selected");
    if (pays === "USA") {
      document.getElementById("btnUSA").classList.add("pays-usa-selected");
    } else if (pays === "Autre") {
      document.getElementById("btnAutre").classList.add("pays-autre-selected");
    }
    document.getElementById("pays").value = pays;
  }

  // Affiche un message de statut
  function showStatus(message, type = 'info') {
    const statusIndicator = document.getElementById('statusIndicator');
    statusIndicator.textContent = message;
    statusIndicator.className = `alert alert-${type} mt-3`;
    statusIndicator.style.display = 'block';
    setTimeout(() => {
      statusIndicator.style.display = 'none';
    }, 5000);
  }

  // Fonction de filtrage des commandes
  function filterOrders(orders) {
    const searchValue = document.getElementById("searchInput").value.toLowerCase();
    const filterSuivi = document.getElementById("filterSuivi").value;
    const filterLivraison = document.getElementById("filterLivraison").value;
    return orders.filter(order => {
      const bt = order.bt_reparation ? order.bt_reparation.toLowerCase() : "";
      const codeAchat = order.code_achat ? order.code_achat.toLowerCase() : "";
      const searchMatch = (bt.includes(searchValue) || codeAchat.includes(searchValue));
      const suiviMatch = filterSuivi ? order.suivi_spg === filterSuivi : true;
      const livraisonMatch = filterLivraison ? order.livraison === filterLivraison : true;
      return searchMatch && suiviMatch && livraisonMatch;
    });
  }
</script>

<!-- SCRIPT PRINCIPAL (ESM) POUR LA GESTION SUPABASE -->
<script type="module">
  import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.0/+esm';

  // Vos infos Supabase
  const SUPABASE_URL = 'https://ptnopkzgbfqjqviuinef.supabase.co';
  const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB0bm9wa3pnYmZxanF2aXVpbmVmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyNjA4ODcsImV4cCI6MjA1NzgzNjg4N30.-oN5Cwo-MWzAUijffDbACSN-92ruQzyAkNub6twFbz8';
  const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

  class AppController {
    constructor() {
      this.orders = [];
      this.isEditing = false;
      this.init();
    }

    async init() {
      try {
        console.log("Initialisation...");
        const connected = await this.testConnection();
        if (connected) {
          showStatus("Connexion à Supabase établie", "success");
        } else {
          showStatus("Problème de connexion à la base", "warning");
        }
        setLivraison('Non livré');
        document.getElementById("btnNonLivre").classList.add("non-livre");
        calculateTotal();
        await this.loadOrdersFromStorage();
      } catch (error) {
        console.error("Erreur init:", error);
        showStatus("Erreur d'initialisation: " + (error.message || "Erreur inconnue"), "danger");
      }
    }

    async testConnection() {
      try {
        const { data, error } = await supabaseClient
          .from('commandes_pieces')
          .select('id')
          .limit(1);
        if (error) {
          console.error("Erreur de connexion:", error);
          return false;
        }
        return true;
      } catch (err) {
        console.error("Erreur testConnection:", err);
        return false;
      }
    }

    async loadOrdersFromSupabase() {
      try {
        console.log("Chargement des commandes...");
        const { data, error } = await supabaseClient
          .from('commandes_pieces')
          .select('*')
          .order('lastUpdated', { ascending: false });
        if (error) {
          console.error("Erreur de chargement:", error);
          showStatus("Erreur chargement: " + error.message, "danger");
          return [];
        }
        console.log("Commandes chargées:", data);
        return data || [];
      } catch (e) {
        console.error("Erreur inattendue:", e);
        showStatus("Erreur inattendue: " + (e.message || "Erreur inconnue"), "danger");
        return [];
      }
    }

    async saveOrderToSupabase(order) {
      try {
        order.quantite = Number(order.quantite);
        order.cout = Number(order.cout);
        order.total = Number(order.total);
        // lastUpdated au format ISO pour col timestamptz
        order.lastUpdated = new Date().toISOString();
        const { data, error } = await supabaseClient
          .from('commandes_pieces')
          .upsert([order], {
            onConflict: 'id',
            returning: 'minimal'
          });
        if (error) {
          console.error("Erreur upsert:", error);
          showStatus("Erreur lors de la sauvegarde: " + (error.message || JSON.stringify(error)), "danger");
          return false;
        }
        console.log("Upsert réussi");
        return true;
      } catch (error) {
        console.error("Erreur saveOrder:", error);
        showStatus("Erreur inattendue: " + (error.message || "Erreur inconnue"), "danger");
        return false;
      }
    }

    async deleteOrderFromSupabase(orderId) {
      try {
        const { error } = await supabaseClient
          .from('commandes_pieces')
          .delete()
          .eq('id', orderId);
        if (error) {
          console.error("Erreur delete:", error);
          showStatus("Erreur suppression: " + error.message, "danger");
          return false;
        }
        return true;
      } catch (error) {
        console.error("Erreur deleteOrder:", error);
        showStatus("Erreur inattendue: " + (error.message || "Erreur inconnue"), "danger");
        return false;
      }
    }

    displayAllOrders() {
      const tableBody = document.getElementById('ordersTableBody');
      tableBody.innerHTML = '';
      // Appliquer le filtrage sur les commandes
      const filteredOrders = filterOrders(this.orders);
      if (!filteredOrders || filteredOrders.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = '<td colspan="13" class="text-center">Aucune commande enregistrée</td>';
        tableBody.appendChild(row);
        return;
      }
      filteredOrders.forEach(order => {
        const row = document.createElement('tr');
        if (order.livraison === "Livré") {
          row.classList.add("table-success");
        } else if (order.livraison === "En cours") {
          row.classList.add("table-warning");
        }
        row.innerHTML = `
          <td>${order.date || '-'}</td>
          <td>${order.bt_reparation || '-'}</td>
          <td>${order.demandeur}</td>
          <td>${order.description}</td>
          <td>${order.manufacturier || '-'}</td>
          <td>${order.modele || '-'}</td>
          <td>${order.quantite}</td>
          <td>${order.cout} ${order.devise}</td>
          <td>${order.total} ${order.devise}</td>
          <td>${order.fournisseur || '-'}</td>
          <td>${order.suivi_spg || 'Non traité'}</td>
          <td>${order.livraison}</td>
          <td class="action-buttons">
            <button class="btn btn-sm btn-primary" onclick="appController.editOrder('${order.id}')">Modifier</button>
            <button class="btn btn-sm btn-danger" onclick="appController.deleteOrder('${order.id}')">Supprimer</button>
          </td>
        `;
        tableBody.appendChild(row);
      });
    }

    async loadOrdersFromStorage() {
      const loadingIndicator = document.getElementById('loadingIndicator');
      loadingIndicator.style.display = 'block';
      try {
        this.orders = await this.loadOrdersFromSupabase();
        this.displayAllOrders();
      } finally {
        loadingIndicator.style.display = 'none';
      }
    }

    async saveData() {
      const form = document.getElementById("orderForm");
      if (!form.checkValidity()) {
        form.reportValidity();
        return;
      }
      let orderId = document.getElementById("orderId").value;
      const isNewOrder = !orderId;
      let existingOrder = null;
      if (!isNewOrder) {
        existingOrder = this.orders.find(o => o.id === orderId);
      }
      let data = {
        ...(isNewOrder ? {} : { id: existingOrder.id }),
        bt_reparation: document.getElementById("bt_reparation").value,
        demandeur: document.getElementById("demandeur").value,
        description: document.getElementById("description").value,
        manufacturier: document.getElementById("manufacturier").value,
        modele: document.getElementById("modele").value,
        quantite: Number(document.getElementById("quantite").value),
        cout: Number(document.getElementById("cout").value),
        devise: document.getElementById("devise").value,
        total: Number(document.getElementById("total").value),
        lien_vendeur: document.getElementById("lien_vendeur").value,
        fournisseur: document.getElementById("fournisseur").value || "Non spécifié",
        suivi_spg: document.getElementById("suivi_spg").value,
        code_achat: document.getElementById("code_achat").value,
        livraison: document.getElementById("livraison").value,
        date: isNewOrder
          ? new Date().toLocaleDateString('fr-FR')
          : existingOrder.date,
        pays: document.getElementById("pays").value
      };
      const saveBtn = document.querySelector("button.btn-primary");
      const originalText = saveBtn.textContent;
      saveBtn.textContent = "Sauvegarde en cours...";
      saveBtn.disabled = true;
      showStatus("Sauvegarde en cours...", "info");
      try {
        const success = await this.saveOrderToSupabase(data);
        if (success) {
          this.orders = await this.loadOrdersFromSupabase();
          this.displayAllOrders();
          showStatus(isNewOrder ? "Commande enregistrée avec succès!" : "Commande mise à jour avec succès!", "success");
          this.resetForm();
        }
      } finally {
        saveBtn.textContent = originalText;
        saveBtn.disabled = false;
      }
    }

    editOrder(orderId) {
      const order = this.orders.find(o => o.id === orderId);
      if (!order) return;
      this.isEditing = true;
      document.getElementById("orderId").value = order.id;
      document.getElementById("bt_reparation").value = order.bt_reparation || '';
      document.getElementById("demandeur").value = order.demandeur;
      document.getElementById("description").value = order.description;
      document.getElementById("manufacturier").value = order.manufacturier || '';
      document.getElementById("modele").value = order.modele || '';
      document.getElementById("quantite").value = order.quantite;
      document.getElementById("cout").value = order.cout;
      document.getElementById("devise").value = order.devise;
      document.getElementById("total").value = order.total;
      document.getElementById("lien_vendeur").value = order.lien_vendeur || '';
      document.getElementById("fournisseur").value = order.fournisseur || '';
      document.getElementById("suivi_spg").value = order.suivi_spg || 'Non traité';
      document.getElementById("code_achat").value = order.code_achat || '';
      setLivraison(order.livraison);
      // Afficher le pays sélectionné lors de la modification
      if (order.pays) {
        setPays(order.pays);
      } else {
        document.getElementById("btnUSA").classList.remove("pays-usa-selected");
        document.getElementById("btnAutre").classList.remove("pays-autre-selected");
        document.getElementById("pays").value = "";
      }
      document.getElementById("cancelEditBtn").style.display = "inline-block";
      document.querySelector(".form-section h2").textContent = "Modifier la commande";
    }

    cancelEdit() {
      this.isEditing = false;
      this.resetForm();
      document.getElementById("cancelEditBtn").style.display = "none";
      document.querySelector(".form-section h2").textContent = "Nouvelle Commande";
    }

    resetForm() {
      document.getElementById("orderForm").reset();
      document.getElementById("orderId").value = "";
      document.getElementById("total").value = "";
      document.getElementById("suivi_spg").value = "Non traité";
      setLivraison("Non livré");
      calculateTotal();
      this.isEditing = false;
      document.getElementById("cancelEditBtn").style.display = "none";
      document.querySelector(".form-section h2").textContent = "Nouvelle Commande";
    }

    async deleteOrder(orderId) {
      if (!confirm("Êtes-vous sûr de vouloir supprimer cette commande ?")) {
        return;
      }
      showStatus("Suppression en cours...", "info");
      const success = await this.deleteOrderFromSupabase(orderId);
      if (success) {
        this.orders = await this.loadOrdersFromSupabase();
        this.displayAllOrders();
        showStatus("Commande supprimée avec succès!", "success");
      }
    }

    exportToExcel() {
      if (this.orders.length === 0) {
        showStatus("Aucune commande à exporter.", "warning");
        return;
      }
      try {
        const exportData = this.orders.map(order => {
          const obj = { ...order };
          obj.cout_avec_devise = `${order.cout} ${order.devise}`;
          obj.total_avec_devise = `${order.total} ${order.devise}`;
          return obj;
        });
        const ws = XLSX.utils.json_to_sheet(exportData);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Commandes");
        XLSX.writeFile(wb, `Commandes_Pieces_${new Date().toISOString().split('T')[0]}.xlsx`);
        showStatus("Exportation réussie", "success");
      } catch (error) {
        console.error("Erreur export Excel:", error);
        showStatus("Erreur export: " + (error.message || "Inconnue"), "danger");
      }
    }

    // Méthode pour filtrer et afficher les commandes selon les filtres
    filterAndDisplayOrders() {
      this.displayAllOrders();
    }
  }

  // Fonction de filtrage sur les commandes chargées
  function filterOrders(orders) {
    const searchValue = document.getElementById("searchInput").value.toLowerCase();
    const filterSuivi = document.getElementById("filterSuivi").value;
    const filterLivraison = document.getElementById("filterLivraison").value;
    return orders.filter(order => {
      const bt = order.bt_reparation ? order.bt_reparation.toLowerCase() : "";
      const codeAchat = order.code_achat ? order.code_achat.toLowerCase() : "";
      const searchMatch = (bt.includes(searchValue) || codeAchat.includes(searchValue));
      const suiviMatch = filterSuivi ? order.suivi_spg === filterSuivi : true;
      const livraisonMatch = filterLivraison ? order.livraison === filterLivraison : true;
      return searchMatch && suiviMatch && livraisonMatch;
    });
  }

  // Redéfinition de displayAllOrders pour utiliser le filtrage
  AppController.prototype.displayAllOrders = function() {
    const tableBody = document.getElementById('ordersTableBody');
    tableBody.innerHTML = '';
    const filteredOrders = filterOrders(this.orders);
    if (!filteredOrders || filteredOrders.length === 0) {
      const row = document.createElement('tr');
      row.innerHTML = '<td colspan="13" class="text-center">Aucune commande enregistrée</td>';
      tableBody.appendChild(row);
      return;
    }
    filteredOrders.forEach(order => {
      const row = document.createElement('tr');
      if (order.livraison === "Livré") {
        row.classList.add("table-success");
      } else if (order.livraison === "En cours") {
        row.classList.add("table-warning");
      }
      row.innerHTML = `
        <td>${order.date || '-'}</td>
        <td>${order.bt_reparation || '-'}</td>
        <td>${order.demandeur}</td>
        <td>${order.description}</td>
        <td>${order.manufacturier || '-'}</td>
        <td>${order.modele || '-'}</td>
        <td>${order.quantite}</td>
        <td>${order.cout} ${order.devise}</td>
        <td>${order.total} ${order.devise}</td>
        <td>${order.fournisseur || '-'}</td>
        <td>${order.suivi_spg || 'Non traité'}</td>
        <td>${order.livraison}</td>
        <td class="action-buttons">
          <button class="btn btn-sm btn-primary" onclick="appController.editOrder('${order.id}')">Modifier</button>
          <button class="btn btn-sm btn-danger" onclick="appController.deleteOrder('${order.id}')">Supprimer</button>
        </td>
      `;
      tableBody.appendChild(row);
    });
  };

  const appController = new AppController();
  window.appController = appController;
</script>

</body>
</html>
